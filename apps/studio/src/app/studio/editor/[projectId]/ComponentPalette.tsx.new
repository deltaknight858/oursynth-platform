'use client';

import React, { useSexport interface ComponentDefinition {
  id: string;
  type: string;
  name: string;
  displayName?: string;
  icon: React.ElementType;
  color: string;
  category: string;
  description?: string;
  keywords?: string[];
  defaultProps: Record<string, any>;
  width?: number;
  height?: number;
}m 'react';
import { useDrag } from 'react-dnd';
import { useProjectContext } from '@/contexts/ProjectProvider';
import styled from 'styled-components';
import { baseComponents } from '@/components/base-components';

const PaletteContainer = styled.div`
  display: flex;
  flex-direction: column;
  height: 100%;
  background: rgba(0, 0, 0, 0.2);
  border-right: 1px solid rgba(255, 255, 255, 0.1);
`;

const SearchBar = styled.input`
  width: 100%;
  padding: 12px;
  background: rgba(0, 0, 0, 0.3);
  border: 1px solid rgba(255, 255, 255, 0.1);
  color: #ffffff;
  font-size: 14px;
  
  &::placeholder {
    color: rgba(255, 255, 255, 0.5);
  }
`;

const ComponentsGrid = styled.div`
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));
  gap: 16px;
  padding: 16px;
  overflow-y: auto;
`;

interface ComponentProps {
  id: string;
  type: string;
  name: string;
  icon: React.ElementType;
  color: string;
  category: string;
  description: string;
  defaultProps?: Record<string, any>;
}

function DraggableComponent({ component }: { component: ComponentDefinition }) {
  const [{ isDragging }, drag] = useDrag(() => ({
    type: 'COMPONENT',
    item: {
      type: component.type,
      defaultProps: component.defaultProps,
      width: component.width || 200,
      height: component.height || 50
    },
    collect: (monitor) => ({
      isDragging: monitor.isDragging()
    })
  }));

  const Icon = component.icon;

  return (
    <div 
      ref={drag} 
      style={{ 
        opacity: isDragging ? 0.5 : 1,
        cursor: 'move'
      }}
    >
      <div 
        style={{
          padding: '16px',
          background: 'rgba(0, 0, 0, 0.3)',
          borderRadius: '8px',
          border: `1px solid ${isDragging ? component.color : 'rgba(255, 255, 255, 0.1)'}`,
          transition: 'all 0.2s ease'
        }}
      >
        <Icon 
          style={{ 
            fontSize: '24px', 
            color: component.color,
            marginBottom: '8px' 
          }} 
        />
        <div style={{ 
          fontSize: '14px',
          fontWeight: '500',
          color: '#ffffff',
          marginBottom: '4px'
        }}>
          {component.displayName || component.name}
        </div>
        <div style={{ 
          fontSize: '12px',
          color: 'rgba(255, 255, 255, 0.6)'
        }}>
          {component.description}
        </div>
      </div>
    </div>
  );
}

export default function ComponentPalette() {
  const [searchTerm, setSearchTerm] = useState('');
  const { project } = useProjectContext();

  const filteredComponents = baseComponents.filter(component =>
    component.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
    component.description.toLowerCase().includes(searchTerm.toLowerCase()) ||
    component.category.toLowerCase().includes(searchTerm.toLowerCase())
  );

  return (
    <PaletteContainer>
      <SearchBar
        type="text"
        placeholder="Search components..."
        value={searchTerm}
        onChange={(e) => setSearchTerm(e.target.value)}
      />
      <ComponentsGrid>
        {filteredComponents.map((component) => (
          <DraggableComponent 
            key={component.id} 
            component={component} 
          />
        ))}
      </ComponentsGrid>
    </PaletteContainer>
  );
}
